<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="ExpanderDirectionDownToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource ActiveForegroundBrushKey}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Name="Content" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />

                            <Grid Width="19" Height="19" Margin="4, 0, 0, 0" Grid.Column="1">
                                <Ellipse Name="Circle" Fill="{DynamicResource BackgroundBrushKey}" Stroke="{DynamicResource ForegroundBrushKey}" />
                                <Path Name="Arrow" Stroke="{DynamicResource ForegroundBrushKey}" StrokeThickness="2" VerticalAlignment="Center" HorizontalAlignment="Center" Data="M1,1.5 L4.5,5 8,1.5" />
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Data" Value="M1,4.5 L4.5,1 8,4.5" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Circle" Property="Fill" Value="{DynamicResource ActiveBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Circle" Property="Fill" Value="{DynamicResource AccentBrushKey}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource HighlightForegroundBrushKey}" />
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource HighlightForegroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="Opacity" Value=".5" />
                            <Setter TargetName="Circle" Property="Fill" Value="{DynamicResource InactiveBackgroundBrushKey}" />
                            <Setter TargetName="Circle" Property="Stroke" Value="{DynamicResource InactiveForegroundBrushKey}" />
                            <Setter TargetName="Arrow" Property="Stroke" Value="{DynamicResource InactiveForegroundBrushKey}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ActiveForegroundBrushKey}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton Name="Header" Style="{StaticResource ExpanderDirectionDownToggleButtonStyle}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" DockPanel.Dock="Top" />
                            <ContentPresenter Name="Content" Focusable="False" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" DockPanel.Dock="Bottom" />
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="Content" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>